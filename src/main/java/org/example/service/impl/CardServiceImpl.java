package org.example.service.impl;import lombok.Getter;import lombok.Setter;import org.example.entity.Card;import org.example.entity.Profile;import org.example.repository.CardRepository;import org.example.service.CardService;import org.example.util.Utils;import java.math.BigDecimal;import java.sql.Timestamp;@Getter@Setterpublic class CardServiceImpl implements CardService {    private final CardRepository cardRepository;    public CardServiceImpl() {        cardRepository = new CardRepository();    }    @Override    public void addCard(String number, String expDate) {        try{            Card card = new Card();            card.setNumber(number);            card.setExpDate(expDate);            card.setBalance(BigDecimal.ZERO);            card.setStatus(Profile.Status.NON_ACTIVE);            card.setCreatedDate(Utils.getNow());            cardRepository.createCard(card);            System.out.println("Success");        } catch (Exception e) {            System.out.println("Failed");        }    }    @Override    public void deleteCard(String phone) {        try {            cardRepository.deleteCard(phone);        } catch (Exception e) {            System.out.println(e.getMessage());        }    }    @Override    public void changeCardStatus(String phone) {        cardRepository.changeCardStatus(phone);    }    @Override    public void updateCard(String phone) {        cardRepository.updateCard(phone);    }    @Override    public void cardList() {        cardRepository.cardList();    }    @Override    public void addCard(Integer idUser, String phone) {        try{            Card card = new Card();            card.setNumber(Utils.getCardNumber());            card.setExpDate(Utils.getExpDate());            card.setBalance(BigDecimal.ZERO);            card.setStatus(Profile.Status.ACTIVE);            card.setCreatedDate(Utils.getNow());            card.setIdUser(idUser);            card.setPhone(phone);            cardRepository.createCard(card);            System.out.println("Success");        } catch (Exception e) {            System.out.println("Failed");        }    }    @Override    public void cardList(String phone) {        cardRepository.cardList(phone);    }    @Override    public void refill(String phone, BigDecimal amount) {        try{            Card card = cardRepository.getCardByPhone(phone);            BigDecimal sum = card.getBalance();            sum.add(amount);            cardRepository.updateCard(card);            System.out.println("Success");        } catch (Exception e) {            System.out.println("Failed");        }    }    @Override    public void attoPay(Profile profile, String number) {        cardRepository.attoPay(profile,number);    }    @Override    public void transactionList() {        cardRepository.transactionList();    }    @Override    public void statistics(Profile profile) {        cardRepository.statistics(profile);    }}